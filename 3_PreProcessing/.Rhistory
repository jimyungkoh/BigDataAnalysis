print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv")
students
#데이터 정제를 위한 조건문
##인덱스 형식
data <- c(10,NA, 30, NA, 45)
data
data[data < 40]
data[data %% 3 !=0]
df <- data.frame(name=c("John", "Amy", "Steve"),
age=c(200, 16, 23),
gender=c("M", "F", "N"))
df
df[df$gender=="N",]
df[df$age>120| df$age<0,]
##if문 활용
x <- 5
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
x <- -1
if (x>0){
print("positive")
}else if(x<0){
print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
ifelse(students[, 2])
#데이터 정제를 위한 조건문
##인덱스 형식
data <- c(10,NA, 30, NA, 45)
data
data[data < 40]
data[data %% 3 !=0]
df <- data.frame(name=c("John", "Amy", "Steve"),
age=c(200, 16, 23),
gender=c("M", "F", "N"))
df
df[df$gender=="N",]
df[df$age>120| df$age<0,]
##if문 활용
x <- 5
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
x <- -1
if (x>0){
print("positive")
}else if(x<0){
print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
ifelse(students[, 2]>=0 $ students[, 2] <=100, students[, 2], NA)
#데이터 정제를 위한 조건문
##인덱스 형식
data <- c(10,NA, 30, NA, 45)
data
data[data < 40]
data[data %% 3 !=0]
df <- data.frame(name=c("John", "Amy", "Steve"),
age=c(200, 16, 23),
gender=c("M", "F", "N"))
df
df[df$gender=="N",]
df[df$age>120| df$age<0,]
##if문 활용
x <- 5
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
x <- -1
if (x>0){
print("positive")
}else if(x<0){
print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
students[, 2] <- ifelse(students[, 2]>=0 & students[, 2] <=100, students[, 2], NA)
#데이터 정제를 위한 조건문
##인덱스 형식
data <- c(10,NA, 30, NA, 45)
data
data[data < 40]
data[data %% 3 !=0]
df <- data.frame(name=c("John", "Amy", "Steve"),
age=c(200, 16, 23),
gender=c("M", "F", "N"))
df
df[df$gender=="N",]
df[df$age>120| df$age<0,]
##if문 활용
x <- 5
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
x <- -1
if (x>0){
print("positive")
}else if(x<0){
print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
students[, 2] <- ifelse(students[, 2]>=0 & students[, 2] <=100,
students[, 2], NA)
students[, 3] <- ifelse(students[, 3]>=0 & students[, 3] <=100,
students[, 3], NA)
students[, 4] <- ifelse(students[, 4]>=0 & students[, 4] <=100,
students[, 4], NA)
#데이터 정제를 위한 조건문
##인덱스 형식
data <- c(10,NA, 30, NA, 45)
data
data[data < 40]
data[data %% 3 !=0]
df <- data.frame(name=c("John", "Amy", "Steve"),
age=c(200, 16, 23),
gender=c("M", "F", "N"))
df
df[df$gender=="N",]
df[df$age>120| df$age<0,]
##if문 활용
x <- 5
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
x <- -1
if (x>0){
print("positive")
}else if(x<0){
print("negative")
}else{
print("zero")
}
##ifelse 함수 활용
city <- "Seoul"
ifelse(city=="Seoul", "Korea", "Other Country")
##조건문을 이용한 데이터 정제의 예
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
students[, 2] <- ifelse(students[, 2]>=0 & students[, 2] <=100,
students[, 2], NA)
students[, 3] <- ifelse(students[, 3]>=0 & students[, 3] <=100,
students[, 3], NA)
students[, 4] <- ifelse(students[, 4]>=0 & students[, 4] <=100,
students[, 4], NA)
students
#데이터 정제 반복ㅂ문
i <- 1
repeat {
if(i>10){
break
}
print(1)
i <- i+1
}
i <- 1
repeat {
if(i>10){
break
}
print(i)
i <- i+1
}
i<-1
while (i<=10) {
print(i)
i<- i+1
}
for (i in 1:10) {
print(i)
i <- i+1
}
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
for(i in 2:4){
students[, i] <- ifelse(students[, i]>=0 & students[, i] <=100,
students[, i], NA)
}
print(students)
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
students[, 2] <- ifelse(students[, 2]>=0 & students[, 2] <=100,
students[, 2], NA)
students[, 3] <- ifelse(students[, 3]>=0 & students[, 3] <=100,
students[, 3], NA)
students[, 4] <- ifelse(students[, 4]>=0 & students[, 4] <=100,
students[, 4], NA)
students
##반복문을 이용한 데이터 정제
students <- read.csv("data/students.csv", header = TRUE,
fileEncoding = "CP949", encoding = "UTF-8")
students
for(i in 2:4){
students[, i] <- ifelse(students[, i]>=0 & students[, i] <=100,
students[, i], NA)
}
print(students)
##사용자 정의 함수
sumAtoB <- function(startNum=1, endNum=10){
s <- 0
for(i in stratNum:endNum){
s <- s+i
}
return(s)
}
sumAtoB()
sumAtoB(2,10)
sumAtoB <- function(startNum=1, endNum=10){
s <- 0
for(i in stratNum:endNum){
s <- s+i
}
return(s)
}
sumAtoB()
sumAtoB(2,10)
##사용자 정의 함수
sumAtoB <- function(startNum=1, endNum=10){
s <- 0
for(i in startNum:endNum){
s <- s+i
}
return(s)
}
sumAtoB()
sumAtoB(2,10)
sumAtoB(start=10, end=15)
#결측값 처리
str(airquality)
?airquality
air <- airquality
##결측치 확인
is.na(air)
##결측치 확인
head(is.na(air))
##결측치 확인
is.na(air$Ozone)
##빈도표 table
table(is.na(air))
table(is.na(air$Ozone))
##사용자 정의 함수를 이용하여 원하는 기능 추가하기
na.cnt <- function(x){
table(is.na(x))
}
na.cnt(air$Ozone)
air_del <- na.omit(air)
na.cnt(air_del)
colSums(air_del) ###컬럼별 합계
colSums(na_del)
na_del <- is.na(air_del)
colSums(na_del)
##결측치 대체
meanOzone=mean(air$Ozone, na.rm=T)
meanOzone=mean(air$Ozone, na.rm=T)
air$Ozone[is.na(air$Ozone)] <- meanOzone
na.cnt(air$Ozone)
air$Ozone <- ifelse(is.na(air$Ozone), meanOzone, air$Ozone)
na.cnt(air$Ozone)
air2 <- airquality
na.cnt(air2)
air2$Ozone <- ifelse(is.na(air2$Ozone), meanOzone, air2$Ozone)
na.cnt(ai2r$Ozone)
na.cnt(air2$Ozone)
outlier <- data.frame(gender =c(1,2,1,3,2,1), #성별 1 or 2
score=c(5,4,3,4,2,6)) #점수 1~5
outlier
table(outlier$gender)
tabel(outlier$score)
outlier$gender <- ifelse(outlier$gender==3, NA, outlier$gender)
outlier$score <- ifelse(outlier$score>5, NA, outlier$score)
air <- airquality
boxplot(air$Ozone)
boxplot(air$Ozone)$stats
air$Ozone <- ifelse(air$Ozone>122, NA, air$Ozone)
boxplot(air$Ozone)
#사용할 데이터셋
starwars
install.packages("dplyr")
library(dplyr)
#사용할 데이터셋
starwars
View(starwars)
df <- as
df <- as.data.frame(starwars)
head(df)
#ctrl+shift+m== %>%
df %>% head(3)
df %>% tail(3)
df %>%
filter(species=="Droid")
df %>%
filter(skin_color=='light', eye_color=="brown")
df %>%
slice(5:10)
df %>%
slice_sample(n=5)
df %>%
slice_sample(prop = 0.1)
df %>%
filter(!is.na(height))%>%
slice_max(height, n=3)
df %>%
select(hair_color, skin_color, eye_color)
install.packages("dplyr")
library(dplyr)
#사용할 데이터셋
starwars
View(starwars)
df <- as.data.frame(starwars)
head(df)
#ctrl+shift+m== %>%
df %>% head(3)
df %>% tail(3)
#filter: 행 추출
## 종(species)이 'Droid'인 데이터 조회
df %>%
filter(species=="Droid")
##skin color가 'light', eye_color가 'brown'
df %>%
filter(skin_color=='light', eye_color=="brown")
##slice: 위치 기반 일부 행 추출
df %>%
slice(5:10)
##slice_sample: 임의 행 추출
df %>%
slice_sample(n=5)
df %>%
slice_sample(prop = 0.1) ###랜덤하게 10% 행 추출
## slice_max, slice_min: 상위 또는 하위 데이터 추출. 단, NA 제거 선행
df %>%
filter(!is.na(height))%>%
slice_max(height, n=3)
#select: 열/컬럼/변수 추출
df %>%
select(hair_color, skin_color, eye_color)
df %>%
select(hair_color, skin_color, eye_color)
df %>%
select(hair_color:eye_color)
df %>%
select(1:3)
df %>%
select(!(hair_color:eye_color))
df %>%
select(starts_with('s'))
df %>%
select(contains("ir"))
df %>%
rename(home_world=homeworld)
df %>%
rename(home_world=homeworld) %>%
head(3)
df %>%
mutate(height_m=height/100) %>%
head(3)
df <- df %>%
mutate(height_m=height/100) %>%
head(3)
df %>%
mutate(bmi=mass/(height_m^2)) %>%
select(name,height_m, mass, bmi)
df %>%
transmute(
height_m=height/100,
bmi=mass/(height_m^2)
)
df <- df %>%
mutate(height_m=height/100) %>%
df %>%
mutate(bmi=mass/(height_m^2)) %>%
select(name,height_m, mass, bmi)
#transmute: 새로 추가한 변수만 확인
df %>%
transmute(
height_m=height/100,
bmi=mass/(height_m^2)
)
df <- df %>%
mutate(height_m=height/100)
df %>%
mutate(bmi=mass/(height_m^2)) %>%
select(name,height_m, mass, bmi)
#transmute: 새로 추가한 변수만 확인
df %>%
transmute(
height_m=height/100,
bmi=mass/(height_m^2)
)
df %>%
arrange(desc(mass))
df %>%
summarise(height=mean(height, na.rm=T))
df <- as.data.frame(starwars)
#mutate: 변수 추가
df <- df %>%
mutate(height_m=height/100)
df %>%
mutate(bmi=mass/(height_m^2)) %>%
select(name,height_m, mass, bmi)
#transmute: 새로 추가한 변수만 확인
df %>%
transmute(
height_m=height/100,
bmi=mass/(height_m^2)
)
#arrange: 정렬
df %>%
arrange(desc(mass))
#summarise: 요약 통계
df %>%
summarise(height=mean(height, na.rm=T))
df %>%
group_by(species) %>%
summarise(n=n(), height=mean(height, na.rm=T))
df %>%
group_by(species) %>%
summarise(n=n(), height=mean(height, na.rm=T)) %>%
filter(n>1)
df %>%
group_by(sex, species) %>%
summarise(height=mean(height, na.rm=T),
mass=mean(mass, na,rm=T))
d1<- data.fram(kids=c("Jack", "Jane", "John", "Lily"),
states=c("CA", "NY", "NV", "TX"))
d2 <- data.frame(kids=c("Jane", "Jack", "Kevin"),
age=c(10,12,8))
d3 <- data.frame(age=c(10,12,8),
name=c("Jane", "Jack", "Kevin"))
d1; d2; d3
inner_join(d1,d2,by="kids")
left_join(d1,d2)
right_join(d1,d2)
d1<- data.frame(kids=c("Jack", "Jane", "John", "Lily"),
states=c("CA", "NY", "NV", "TX"))
d2 <- data.frame(kids=c("Jane", "Jack", "Kevin"),
age=c(10,12,8))
d3 <- data.frame(age=c(10,12,8),
name=c("Jane", "Jack", "Kevin"))
d1; d2; d3
inner_join(d1,d2,by="kids")
left_join(d1,d2)
right_join(d1,d2)
inner_join(d1,d3,by=c("kids", "name"))
inner_join(d1,d3,by=c("kids"-"name"))
t1 <- data.frame(id=c(1:5),
test=seq(10,50, by=10))
t2 <- data.frame(id=c(6,8),
test=seq(60,80,by=10))
t1;t2
bind_rows(t1,t2)
t2 <- data.frame(id=c(6,8),
test=seq(60,80, by=10))
t2 <- data.frame(id=c(6,8),
test=seq(60,80, by=10))
t1 <- data.frame(id=c(1:5),
test=seq(10,50, by=10))
t2 <- data.frame(id=c(6:8),
test=seq(60,80, by=10))
t1;t2
bind_rows(t1,t2)
